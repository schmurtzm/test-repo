name: Generate Readme

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Wait for tagged-release task to succeed
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.ref }}
        check-name: 'Tagged release'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10
    - uses: actions/checkout@v3
    - name: Create table of images
      run: |
        release_assets_info=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest)
        tag_name=$(echo $release_assets_info | jq '.tag_name')
        echo "" > README.md
        echo "" >> README.md
        echo \# Ports-Collection for Onion >> README.md
        size=$(echo $release_assets_info | jq -r '.assets[]? | select(.name | contains("-Onion-Ports-Collection.7z")) | .size' | numfmt --to=iec)
        echo "[Download the full Ports-Collection for Onion](https://github.com/$GITHUB_REPOSITORY/releases/latest/download/-Onion-Ports-Collection.7z) ($size)" >> README.md
        echo \#\# PORTS COLLECTION >> README.md
        echo \#\# FULL PORTS >> README.md
        echo These ports are free to play and contains all required assets. >> README.md
        echo "|        |        |        |        |        |" >> README.md
        echo "| :----: | :----: | :----: | :----: | :----: |" >> README.md
        count=0
        for dir in */ ; do
          if [ -d "$dir/Roms/PORTS/Imgs" ] && [ ! -f "$dir/Roms/PORTS/Games"/*/_required_files.txt ]; then
            image=$(find "$dir/Roms/PORTS/Imgs" -maxdepth 1 -type f -name "*.png")
            if [ -n "$image" ]; then
              name=$(basename "$dir" | sed -e 's/ /./g' -e 's/(//g' -e 's/)//g' -e 's/!/./g' -e 's/\x27/./g' -e 's/\.\./\./g')
              fullname=$(basename "$dir")
              echo ----------------- $fullname    ----------  $name
              
              release_asset_url=$(echo $release_assets_info | jq -r '.assets[]? | select(.name | contains("'"$name"'")) | .url')
              echo release_asset_url : $release_asset_url
              
              # size=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$release_asset_url" | jq '.size' | numfmt --to=iec)
              size=$(echo $release_assets_info | jq -r '.assets[]? | select(.name | contains("'"$name"'")) | .size' | numfmt --to=iec)
              echo size : $size
              
              # download_url=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$release_asset_url" | jq -r '.browser_download_url')
              download_url=https://github.com/$GITHUB_REPOSITORY/releases/latest/download/$name.7z
              echo download_url : $download_url
              
              if [ $count -eq 0 ]; then
                echo -n "| " >> README.md
              fi
              echo -n "<a href=\"$download_url\"><img src=\"$image\" alt=\"$fullname\" height=\"200\" /></a><br><sub>[$fullname]($download_url)<br>$size</sub> | " >> README.md
              count=$((count + 1))
              if [ $count -eq 5 ]; then
                echo "" >> README.md
                count=0
              fi
            fi
          fi
        done
        if [ $count -ne 0 ]; then
          echo "" >> README.md
        fi
    - name: Create table of images for engines
      run: |
        release_assets_info=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest)
        tag_name=$(echo $release_assets_info | jq '.tag_name')
        
        echo "" >> README.md
        echo "" >> README.md
        echo \#\# PORT ENGINES >> README.md
        echo The assets of these ports are licensed and must be added manually. Only open source engines and configuration are included. >> README.md
        echo "|        |        |        |        |        |" >> README.md
        echo "| :----: | :----: | :----: | :----: | :----: |" >> README.md
        count=0
        for dir in */ ; do
          if [ -d "$dir/Roms/PORTS/Imgs" ] && [ -f "$dir/Roms/PORTS/Games"/*/_required_files.txt ]; then
            image=$(find "$dir/Roms/PORTS/Imgs" -maxdepth 1 -type f -name "*.png")
            if [ -n "$image" ]; then
              name=$(basename "$dir" | sed -e 's/ /./g' -e 's/(//g' -e 's/)//g' -e 's/!/./g' -e 's/\x27/./g' -e 's/\.\./\./g')
              fullname=$(basename "$dir")
              echo ----------------- $fullname    ----------  $name
              
              release_asset_url=$(echo $release_assets_info | jq -r '.assets[]? | select(.name | contains("'"$name"'")) | .url')
              echo release_asset_url : $release_asset_url
              
              # size=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$release_asset_url" | jq '.size' | numfmt --to=iec)
              size=$(echo $release_assets_info | jq -r '.assets[]? | select(.name | contains("'"$name"'")) | .size' | numfmt --to=iec)
              echo size : $size
              
              # download_url=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$release_asset_url" | jq -r '.browser_download_url')
              download_url=https://github.com/$GITHUB_REPOSITORY/releases/latest/download/$name.7z
              echo download_url : $download_url
              
              if [ $count -eq 0 ]; then
                echo -n "| " >> README.md
              fi
              echo -n "<a href=\"$download_url\"><img src=\"$image\" alt=\"$fullname\" height=\"200\" /></a><br><sub>[$fullname]($download_url)<br>$size</sub> | " >> README.md
              count=$((count + 1))
              if [ $count -eq 5 ]; then
                echo "" >> README.md
                count=0
              fi
            fi
          fi
        done 
        if [ $count -ne 0 ]; then
          echo "" >> README.md
        fi
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Readme update"
        git push
